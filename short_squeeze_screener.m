% Short Squeeze Screener for MATLAB
%
% This script loads financial data collected by the Python script,
% filters it based on key short squeeze indicators, and ranks the
% top candidates based on a calculated "Squeeze Score".

clc;            % Clear the command window
clear;          % Clear the workspace
close all;      % Close all figures

fprintf('--- MATLAB Short Squeeze Screener Initialized ---\n');

% --- 1. LOAD DATA ---
% This section finds the most recent CSV file generated by the Python script.
try
    filePattern = fullfile(pwd, 'full_market_data_US_Exchanges_*.csv');
    dataFiles = dir(filePattern);
    
    if isempty(dataFiles)
        error('CRITICAL ERROR: No data file found. Please run the Python script first to generate the CSV file.');
    end
    
    [~, idx] = max([dataFiles.datenum]);
    latestFile = fullfile(pwd, dataFiles(idx).name);
    
    fprintf('Loading the most recent data file: %s\n', latestFile);
    
    % Read the data into a MATLAB table
    opts = detectImportOptions(latestFile);
    % Use the 'setvartype' function for modern MATLAB compatibility.
    opts = setvartype(opts, 'Ticker', 'string'); % Ensure tickers are read as strings
    allData = readtable(latestFile, opts);

    fprintf('Successfully loaded data for %d stocks.\n\n', height(allData));

catch ME
    rethrow(ME);
end


% --- 2. FILTERING CRITERIA ---
% Adjust these thresholds to refine your search.
minShortInterest = 20.0;    % Minimum short interest as a percentage of float (e.g., 20.0 for 20%)
minDaysToCover = 3.0;       % Minimum days to cover (short interest ratio)
maxFloat = 100e6;           % Maximum number of shares in the float (e.g., 100e6 for 100 million)
maxPrice = 5.0;             % NEW: Maximum current price of the stock

fprintf('Applying Filters:\n');
fprintf('  - Short Interest > %.1f%%\n', minShortInterest);
fprintf('  - Days to Cover > %.1f\n', minDaysToCover);
fprintf('  - Float < %.0fM shares\n', maxFloat / 1e6);
fprintf('  - Current Price < $%.2f\n', maxPrice); % Display the new filter

% Apply the filters to the data table
candidates = allData( ...
    allData.ShortInterestPercent > minShortInterest & ...
    allData.DaysToCover > minDaysToCover & ...
    allData.Float_Shares < maxFloat & ...
    allData.CurrentPrice < maxPrice, : ... % Added the price filter
);

if isempty(candidates)
    fprintf('\nNo stocks met the specified criteria. Try loosening your filters.\n');
    return;
end

fprintf('\nFound %d potential candidates after filtering.\n\n', height(candidates));


% --- 3. SCORING AND RANKING ---
% This section calculates a "Squeeze Score" to rank the filtered candidates.
try
    % Normalize each factor from 0 to 1
    normSI = (candidates.ShortInterestPercent - min(candidates.ShortInterestPercent)) / (max(candidates.ShortInterestPercent) - min(candidates.ShortInterestPercent));
    normDTC = (candidates.DaysToCover - min(candidates.DaysToCover)) / (max(candidates.DaysToCover) - min(candidates.DaysToCover));
    
    % A lower value is better for Float, so we invert the normalization.
    normFloat = 1 - ((candidates.Float_Shares - min(candidates.Float_Shares)) / (max(candidates.Float_Shares) - min(candidates.Float_Shares)));
    
    % Handle cases where max and min are the same to avoid NaN.
    normSI(isnan(normSI)) = 1;
    normDTC(isnan(normDTC)) = 1;
    normFloat(isnan(normFloat)) = 1;

    % Define weights for each factor. Adjust these to change the ranking logic.
    weightSI = 0.50;    % Short interest is the most important factor
    weightDTC = 0.30;   % Days to cover is the second most important
    weightFloat = 0.20; % Low float is a contributing factor

    % Calculate the weighted Squeeze Score
    squeezeScore = (normSI * weightSI + normDTC * weightDTC + normFloat * weightFloat) * 100;
    
    candidates.SqueezeScore = squeezeScore;

    % Sort the candidates by the Squeeze Score in descending order
    sortedCandidates = sortrows(candidates, 'SqueezeScore', 'descend');

catch ME
    fprintf('An error occurred during scoring: %s\n', ME.message);
    return;
end


% --- 4. DISPLAY RESULTS ---
fprintf('--- FINAL RESULTS: TOP SHORT SQUEEZE CANDIDATES (UNDER $%.2f) ---\n', maxPrice);

% Select the top 15 candidates to display
numTopCandidates = min(15, height(sortedCandidates));
topCandidates = sortedCandidates(1:numTopCandidates, :);

% Prepare data for display, applying the formatting
displayData = table(...
    topCandidates.Ticker, ...
    round(topCandidates.SqueezeScore, 1), ...
    topCandidates.ShortInterestPercent, ...
    topCandidates.DaysToCover, ...
    cellfun(@formatMarketNumber, num2cell(topCandidates.Float_Shares), 'UniformOutput', false), ...
    cellfun(@formatMarketNumber, num2cell(topCandidates.MarketCap), 'UniformOutput', false), ...
    topCandidates.CurrentPrice, ...
    'VariableNames', {'Ticker', 'SqueezeScore', 'ShortInterest(%)', 'DaysToCover', 'Float', 'MarketCap', 'CurrentPrice'} ...
);

disp(displayData);


% --- LOCAL HELPER FUNCTION ---
function formattedStr = formatMarketNumber(n)
    % This helper function formats a large number into a more readable
    % string with 'B' for billions or 'M' for millions.
    if n >= 1e9
        formattedStr = sprintf('%.2fB', n/1e9);
    else
        formattedStr = sprintf('%.2fM', n/1e6);
    end
end

